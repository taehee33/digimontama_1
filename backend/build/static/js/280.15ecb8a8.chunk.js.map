{"version":3,"file":"static/js/280.15ecb8a8.chunk.js","mappings":"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","sources":["data/digimondata_digitalmonstercolor25th_ver1.js"],"sourcesContent":["// src/data/digimondata_digitalmonstercolor25th_ver1.js\n\nconst entriesVer1 = {\n    Digitama: { \n      sprite: 133,\n      evolutionStage: \"Digitama\",\n      timeToEvolveSeconds: 10,\n      hungerTimer: 0,\n      strengthTimer: 0,\n      poopTimer: 0,\n      minWeight: 0,\n      maxStamina: 0,\n    },\n    Botamon: {\n      sprite: 210,\n      evolutionStage: \"Baby1\",\n      timeToEvolveSeconds: 600,\n      hungerTimer: 3,\n      strengthTimer: 3,\n      poopTimer: 3,\n      minWeight: 5,\n      maxStamina: 50,\n    },\n    Koromon: {\n      sprite: 225,\n      evolutionStage: \"Baby2\",\n      timeToEvolveSeconds: 600,\n      hungerTimer: 4,\n      strengthTimer: 4,\n      poopTimer: 4,\n      minWeight: 6,\n      maxStamina: 60,\n    },\n    Agumon: {\n      sprite: 240,\n      evolutionStage: \"Child\",\n      timeToEvolveSeconds: 600,\n      hungerTimer: 5,\n      strengthTimer: 5,\n      poopTimer: 5,\n      minWeight: 10,\n      maxStamina: 100,\n    },\n    Betamon: {\n      sprite: 260,\n      evolutionStage: \"Child\",\n      timeToEvolveSeconds: 600,\n      hungerTimer: 5,\n      strengthTimer: 5,\n      poopTimer: 5,\n      minWeight: 10,\n      maxStamina: 100,\n    },\n  };\n  \n  const defaultStats = {\n    sprite: 133,\n    evolutionStage: \"Digitama\",\n    maxStamina: 0,\n    minWeight: 0,\n  \n    lifespanSeconds: 0,\n    lifespanMinutes: 0,\n    timeToEvolve: 0,\n    timeToEvolveSeconds: 0,\n  \n    sleepTime: { hour: 0, minute: 0 },\n    wakeupTime: { hour: 0, minute: 0 },\n    hungerTimer: 0,\n    strengthTimer: 0,\n    poopTimer: 0,\n  \n    hungerCountdown: 0,\n    strengthCountdown: 0,\n  \n    healing: 0,\n    attribute: 0,\n    power: 0,\n    attackSprite: 0,\n    altAttackSprite: 65535,\n  \n    age: 0,\n    weight: 0,\n    strength: 0,\n    stamina: 0,\n    winRate: 0,\n    effort: 0,\n    careMistakes: 0,\n  \n    fullness: 0,\n    health: 0,\n  };\n  \n  export function initializeStats(digimonName) {\n    const custom = entriesVer1[digimonName] || {};\n    const merged = { ...defaultStats, ...custom };\n  \n    merged.hungerCountdown = merged.hungerTimer * 60;\n    merged.strengthCountdown = merged.strengthTimer * 60;\n    return merged;\n  }\n  \n  export function updateLifespan(prev, deltaTime) {\n    const s = { ...prev };\n    s.lifespanSeconds += deltaTime;\n    s.lifespanMinutes += deltaTime / 60;\n  \n    s.timeToEvolveSeconds = Math.max(0, s.timeToEvolveSeconds - deltaTime);\n  \n    const dec = deltaTime / 60;\n    s.timeToEvolve = Math.max(0, s.timeToEvolve - dec);\n  \n    if (s.hungerTimer > 0) {\n      s.hungerCountdown -= deltaTime;\n      if (s.hungerCountdown <= 0) {\n        s.fullness = Math.max(0, s.fullness - 1);\n        s.hungerCountdown = s.hungerTimer * 60;\n      }\n    }\n    if (s.strengthTimer > 0) {\n      s.strengthCountdown -= deltaTime;\n      if (s.strengthCountdown <= 0) {\n        s.health = Math.max(0, s.health - 1);\n        s.strengthCountdown = s.strengthTimer * 60;\n      }\n    }\n  \n    return s;\n  }\n  \n  export function updateAge(stats) {\n    // 사용 안 해도 됨\n    return stats;\n  }\n  \n  // Digitama->Botamon, Botamon->Koromon, Koromon->(careMistakes<4 => Agumon, else Betamon)\n  export const evolutionConditions = {\n    Digitama: {\n      evolution: [\n        {\n          next: \"Botamon\",\n          condition: {\n            check: (stats) => stats.timeToEvolveSeconds <= 0,\n          },\n        },\n      ],\n    },\n    Botamon: {\n      evolution: [\n        {\n          next: \"Koromon\",\n          condition: {\n            check: (stats) => stats.timeToEvolveSeconds <= 0,\n          },\n        },\n      ],\n    },\n    Koromon: {\n      evolution: [\n        {\n          next: \"Agumon\",\n          condition: {\n            check: (stats) =>\n              stats.timeToEvolveSeconds <= 0 && stats.careMistakes < 4,\n          },\n        },\n        {\n          next: \"Betamon\",\n          condition: {\n            check: (stats) =>\n              stats.timeToEvolveSeconds <= 0 && stats.careMistakes >= 4,\n          },\n        },\n      ],\n    },\n    Agumon: {\n      evolution: [],\n    },\n    Betamon: {\n      evolution: [],\n    },\n  };"],"names":["entriesVer1","Digitama","sprite","evolutionStage","timeToEvolveSeconds","hungerTimer","strengthTimer","poopTimer","minWeight","maxStamina","Botamon","Koromon","Agumon","Betamon","defaultStats","lifespanSeconds","lifespanMinutes","timeToEvolve","sleepTime","hour","minute","wakeupTime","hungerCountdown","strengthCountdown","healing","attribute","power","attackSprite","altAttackSprite","age","weight","strength","stamina","winRate","effort","careMistakes","fullness","health","initializeStats","digimonName","custom","merged","updateLifespan","prev","deltaTime","s","Math","max","dec","updateAge","stats","evolutionConditions","evolution","next","condition","check"],"sourceRoot":""}